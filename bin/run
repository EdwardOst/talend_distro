#!/usr/bin/env bash

set -e
set -u
set -o pipefail

run_script_path=$(readlink -e "${BASH_SOURCE[0]}")
run_script_dir="${run_script_path%/*}"

source "${run_script_dir}/container-run.sh"

# declare environment vars with empty defaults to satisify -u option
declare APP_NAME="${APP_NAME:-}"

declare job_id="${1:-}"
declare job_name="${2:-t0_docker_create_customer}"
declare project_name="${3:-SE_DEMO}"
declare app_name="${4:-${APP_NAME:-${app_name:-talend_sample_container_app}}}"
declare job_version="${5:-0.1.0-SNAPSHOT}"
declare image="${6:-${USER}/${app_name}}"
declare image_version="${7-0.1.0}"

declare usage="./d03-run <job_id> [ <project_name [ <image> [ <image_version> [ <app_name> [ <job_name> [ <job_version> ] ] ] ] ] ]"
if [ -z "${job_id}" ]; then
    echo "WARNING: missing job_id: ${usage}"  1>&2
    job_id=$(uuidgen -t)
    echo "WARNING: using job_id=${job_id}" 1>&2
fi

# container has knowledge of app name
declare global_root="/home/eost/talend/docker/sample"
declare project_root="${global_root}/${project_name}"
declare app_root="${project_root}/${app_name}"
declare job_root="${app_root}/${job_name}"
declare job_instance_root="${job_root}/${job_id}"
# talend/docker/sample/SE_DEMO/talend_sample_container_app/t0_docker_create_customer/xxxx

# jobs do not have knowledge of app name, these paths are relative to the job in the container
declare global_target="talend"
declare project_target="${global_target}/${project_name}"
declare job_target="${project_target}/${job_name}"
declare job_instance_target="${job_target}/${job_id}"
# talend/SE_DEMO/t0_docker_create_customer/xxx

echo "TALEND_${project_name^^}_${job_name^^}_JOB_ID=${job_id}"

# we use re-use ${project_root}/in for common input file
# it is mapped to in_dir context variable by the job level configuration ${job_root}/job.cfg
# note that the paths within job.cfg must be relative to the container, not the host OS

# set JOB_ID environment variable to allow introspection of container
set -x
docker run \
    --env "TALEND_${project_name^^}_${job_name^^}_JOB_ID=${job_id}" \
    -v "${global_root}/config:/${global_target}/config:ro" \
    -v "${project_root}/config:/${project_target}/config:ro" \
    -v "${job_root}/config:/${job_target}/config:ro" \
    -v "${job_instance_root}/config:/${job_instance_target}/config:ro" \
    -v "${job_root}/amc:/${job_target}/amc" \
    -v "${app_root}/in:/${job_instance_target}/in:ro" \
    -v "${job_instance_root}/out:/${job_instance_target}/out" \
    -v "${job_instance_root}/data:/${job_instance_target}/data" \
    -v "${job_instance_root}/temp:/${job_instance_target}/temp" \
    -v "${job_instance_root}/log:/${job_instance_target}/log" \
    "${image}:${image_version}" \
    --rm \
    "/talend/${app_name}/${job_name}/${job_name}_run.sh" "--context_param" "job_id=${job_id}"

# add -it and comment out --rn and entry point in order to launch interactively

# set JOB_ID environment variable to allow introspection of container
: <<EOF
docker run \
    --env "TALEND_${project_name^^}_${job_name^^}_JOB_ID=${job_id}" \
    -v "${global_root}/config:/${global_target}/config:ro" \
    -v "${project_root}/config:/${project_target}/config:ro" \
    -v "${job_root}/config:/${job_target}/config:ro" \
    -v "${job_instance_root}/config:/${job_instance_target}/config:ro" \
    -v "${job_root}/amc:/${job_target}/amc" \
    -v "${app_root}/in:/${job_instance_target}/in:ro" \
    -v "${job_instance_root}/out:/${job_instance_target}/out" \
    -v "${job_instance_root}/data:/${job_instance_target}/data" \
    -v "${job_instance_root}/temp:/${job_instance_target}/temp" \
    -v "${job_instance_root}/log:/${job_instance_target}/log" \
    --rm \
    "${image}:${image_version}" \
    "/talend/${app_name}/${job_name}/${job_name}_run.sh" "--context_param" "job_id=${job_id}"
EOF
